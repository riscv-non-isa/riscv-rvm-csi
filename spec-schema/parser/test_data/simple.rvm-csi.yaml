version: 1
c-api-title: RVM-CSI API
c-documentation-title: RVM-CSI API
boilerplate: >
  Copyright (c) RISC-V International 2022.
  Creative Commons License
notes:
  - This is an example YAML used to demonstrate validation against the schema, rvm-csi.schema.json.
  - It does not reflect the real API specification, but the real specification will have similar form.
modules:
  - name: Common header file describing CSI API.
    c-specific: true
    c-filename: csi.h
    description: >
      This header should not be included directly by users.  Rather, users include
      <platform_name>.h, which is supplied by a Board Support Pack (BSP) for a specific
      platform.  This in turn includes a series of platform-specific headers culminating
      in this common one.
    c-include-files:
      - filename: csi_interrupts.h
        system-header: false
  - name: General-Purpose Definitions for use in CSI code
    description: >
      This file is included prior to all other headers and just contains general-purpose definitions.
    c-specific: true
    c-filename: csi_defs.h
    c-type-declarations:
    - name: csi_status_t
      description: An example of a enumeration definition with assigned values 
      type: enum
      enum-members:
      - name: CSI_SUCCESS
        value: 0
      - name: CSI_NOT_IMPLEMENTED
        value: -1
      - name: CSI_ERROR
        value: -2
    - name: csi_check_t
      type: enum
      description: An example of a enumeration definition
      enum-members:
      - name: CSI_SUCCESS
      - name: CSI_NOT_IMPLEMENTED
      - name: CSI_ERROR
    - name: csi_timer_count_t
      description: An example of an unsigned definition
      type: unsigned  
    - name: csi_dummy_t
      type: struct
      description: An example of a structure definition
      struct-members:
         - name: a
           type: unsigned *
         - name: b
           type: uint32_t
         - name: memory
           type: csi_memory_t *
         - name: status
           type: csi_status_t *
    functions:
        - name: csi_set_status
          description: Set some arbitrary status
          c-params:
          - name: isr
            description: Status to set
            type: csi_status_t
          c-return-value: 
            description: Not applicable
            type: void

  - name: Interrupt and Timer Support
    description: Interrupt and timer support operations
    c-specific: false
    c-filename: csi_interrupts.h
    functions:
      - name: csi_register_isr
        description: >
          Registers a user-supplied function <code>isr</code>that will be called by the base trap handler on receipt
          of a trap arising from a given signal
        c-specific-notes:
          - >
            This function uses the CSI base trap handler so is surrounded by <code>#ifndef CUSTOM_BASE_TRAP_HANDLER</code>.
            It transparently deals with routing the desired signal to the hart and enabling the interrupt
            (by internally calling <code>cs_route_signal()</code>).
        c-params:
          - name: isr
            description: User's Interrupt Service Routine
            type: csi_isr_t *
          - name: isr_ctx
            description: Context pointer to pass into user's ISR
            type: void *
          - name: signal
            description: Enumerated signal to be handled by this ISR
            type: csi_signal_t
            notes:
            - example of function parameter notes
        c-return-value: 
          description: Status of register isr
          type: csi_status_t
  - name: Platform Discovery
    description: Functions for discovery of platform characteristics
    c-specific: false
    c-filename: csi_discovery.h
    c-type-declarations:
    - name: csi_timer_count_t
      type: unsigned
      description: An example of an unsigned type definition
    functions:
      - name: csi_get_cpu_clk_freq
        description: Returns CPU clock frequency in Hz.
        c-return-value: 
          description: clock frequency in Hz
          type: const unsigned
